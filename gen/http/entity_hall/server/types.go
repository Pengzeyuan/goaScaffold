// Code generated by goa v3.2.4, DO NOT EDIT.
//
// entity_hall HTTP server types
//
// Command:
// $ goa gen boot/design

package server

import (
	entityhall "boot/gen/entity_hall"

	goa "goa.design/goa/v3/pkg"
)

// WaitLineOverviewRequestBody is the type of the "entity_hall" service
// "WaitLineOverview" endpoint HTTP request body.
type WaitLineOverviewRequestBody struct {
	// 行政区划代码
	RegionCode *string `form:"regionCode,omitempty" json:"regionCode,omitempty" xml:"regionCode,omitempty"`
	// 起始时间
	StartDate *string `form:"startDate,omitempty" json:"startDate,omitempty" xml:"startDate,omitempty"`
	// 结束时间
	EndDate *string `form:"endDate,omitempty" json:"endDate,omitempty" xml:"endDate,omitempty"`
}

// WaitLineOverviewResponseBody is the type of the "entity_hall" service
// "WaitLineOverview" endpoint HTTP response body.
type WaitLineOverviewResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string                            `form:"errmsg" json:"errmsg" xml:"errmsg"`
	Data   *WaitLineOverviewRespResponseBody `form:"data" json:"data" xml:"data"`
}

// WaitLineOverviewBadRequestResponseBody is the type of the "entity_hall"
// service "WaitLineOverview" endpoint HTTP response body for the "bad_request"
// error.
type WaitLineOverviewBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WaitLineOverviewInternalServerErrorResponseBody is the type of the
// "entity_hall" service "WaitLineOverview" endpoint HTTP response body for the
// "internal_server_error" error.
type WaitLineOverviewInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// WaitLineOverviewRespResponseBody is used to define fields on response body
// types.
type WaitLineOverviewRespResponseBody struct {
	// 累计排号数
	TodayDQ int32 `form:"todayDQ" json:"todayDQ" xml:"todayDQ"`
	// 累计办件量
	CumulativeDQ int32 `form:"cumulativeDQ" json:"cumulativeDQ" xml:"cumulativeDQ"`
}

// NewWaitLineOverviewResponseBody builds the HTTP response body from the
// result of the "WaitLineOverview" endpoint of the "entity_hall" service.
func NewWaitLineOverviewResponseBody(res *entityhall.WaitLineOverviewResult) *WaitLineOverviewResponseBody {
	body := &WaitLineOverviewResponseBody{
		Errcode: res.Errcode,
		Errmsg:  res.Errmsg,
	}
	if res.Data != nil {
		body.Data = marshalEntityhallWaitLineOverviewRespToWaitLineOverviewRespResponseBody(res.Data)
	}
	return body
}

// NewWaitLineOverviewBadRequestResponseBody builds the HTTP response body from
// the result of the "WaitLineOverview" endpoint of the "entity_hall" service.
func NewWaitLineOverviewBadRequestResponseBody(res *goa.ServiceError) *WaitLineOverviewBadRequestResponseBody {
	body := &WaitLineOverviewBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewWaitLineOverviewInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "WaitLineOverview" endpoint of the "entity_hall"
// service.
func NewWaitLineOverviewInternalServerErrorResponseBody(res *goa.ServiceError) *WaitLineOverviewInternalServerErrorResponseBody {
	body := &WaitLineOverviewInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewWaitLineOverviewPayload builds a entity_hall service WaitLineOverview
// endpoint payload.
func NewWaitLineOverviewPayload(body *WaitLineOverviewRequestBody) *entityhall.WaitLineOverviewPayload {
	v := &entityhall.WaitLineOverviewPayload{
		RegionCode: *body.RegionCode,
		StartDate:  body.StartDate,
		EndDate:    body.EndDate,
	}

	return v
}

// ValidateWaitLineOverviewRequestBody runs the validations defined on
// WaitLineOverviewRequestBody
func ValidateWaitLineOverviewRequestBody(body *WaitLineOverviewRequestBody) (err error) {
	if body.RegionCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("regionCode", "body"))
	}
	return
}
