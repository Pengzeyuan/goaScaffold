// Code generated by goa v3.2.4, DO NOT EDIT.
//
// ActualTime HTTP server types
//
// Command:
// $ goa gen boot/design

package server

import (
	actualtime "boot/gen/actual_time"

	goa "goa.design/goa/v3/pkg"
)

// ReceiveThirdPartyPushDataRequestBody is the type of the "ActualTime" service
// "ReceiveThirdPartyPushData" endpoint HTTP request body.
type ReceiveThirdPartyPushDataRequestBody struct {
	// 推送的具体方法
	MethodName *int `form:"methodName,omitempty" json:"methodName,omitempty" xml:"methodName,omitempty"`
	// 数据数量
	Count *int `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
	// 第三方推送数据
	Data interface{} `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// GetActualTimeDataResponseBody is the type of the "ActualTime" service
// "GetActualTimeData" endpoint HTTP response body.
type GetActualTimeDataResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string                     `form:"errmsg" json:"errmsg" xml:"errmsg"`
	Data   *CanalDataRespResponseBody `form:"data" json:"data" xml:"data"`
}

// ReceiveThirdPartyPushDataResponseBody is the type of the "ActualTime"
// service "ReceiveThirdPartyPushData" endpoint HTTP response body.
type ReceiveThirdPartyPushDataResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string `form:"errmsg" json:"errmsg" xml:"errmsg"`
	// success
	Result string `form:"result" json:"result" xml:"result"`
}

// GetActualTimeDataBadRequestResponseBody is the type of the "ActualTime"
// service "GetActualTimeData" endpoint HTTP response body for the
// "bad_request" error.
type GetActualTimeDataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetActualTimeDataInternalServerErrorResponseBody is the type of the
// "ActualTime" service "GetActualTimeData" endpoint HTTP response body for the
// "internal_server_error" error.
type GetActualTimeDataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ReceiveThirdPartyPushDataBadRequestResponseBody is the type of the
// "ActualTime" service "ReceiveThirdPartyPushData" endpoint HTTP response body
// for the "bad_request" error.
type ReceiveThirdPartyPushDataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ReceiveThirdPartyPushDataInternalServerErrorResponseBody is the type of the
// "ActualTime" service "ReceiveThirdPartyPushData" endpoint HTTP response body
// for the "internal_server_error" error.
type ReceiveThirdPartyPushDataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CanalDataRespResponseBody is used to define fields on response body types.
type CanalDataRespResponseBody struct {
	// 数据类别
	DataType int32 `form:"dataType" json:"dataType" xml:"dataType"`
	// 数据
	DataInfo interface{} `form:"dataInfo" json:"dataInfo" xml:"dataInfo"`
}

// NewGetActualTimeDataResponseBody builds the HTTP response body from the
// result of the "GetActualTimeData" endpoint of the "ActualTime" service.
func NewGetActualTimeDataResponseBody(res *actualtime.GetActualTimeDataResult) *GetActualTimeDataResponseBody {
	body := &GetActualTimeDataResponseBody{
		Errcode: res.Errcode,
		Errmsg:  res.Errmsg,
	}
	if res.Data != nil {
		body.Data = marshalActualtimeCanalDataRespToCanalDataRespResponseBody(res.Data)
	}
	return body
}

// NewReceiveThirdPartyPushDataResponseBody builds the HTTP response body from
// the result of the "ReceiveThirdPartyPushData" endpoint of the "ActualTime"
// service.
func NewReceiveThirdPartyPushDataResponseBody(res *actualtime.ReceiveThirdPartyPushDataResult) *ReceiveThirdPartyPushDataResponseBody {
	body := &ReceiveThirdPartyPushDataResponseBody{
		Errcode: res.Errcode,
		Errmsg:  res.Errmsg,
		Result:  res.Result,
	}
	return body
}

// NewGetActualTimeDataBadRequestResponseBody builds the HTTP response body
// from the result of the "GetActualTimeData" endpoint of the "ActualTime"
// service.
func NewGetActualTimeDataBadRequestResponseBody(res *goa.ServiceError) *GetActualTimeDataBadRequestResponseBody {
	body := &GetActualTimeDataBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetActualTimeDataInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "GetActualTimeData" endpoint of the "ActualTime"
// service.
func NewGetActualTimeDataInternalServerErrorResponseBody(res *goa.ServiceError) *GetActualTimeDataInternalServerErrorResponseBody {
	body := &GetActualTimeDataInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewReceiveThirdPartyPushDataBadRequestResponseBody builds the HTTP response
// body from the result of the "ReceiveThirdPartyPushData" endpoint of the
// "ActualTime" service.
func NewReceiveThirdPartyPushDataBadRequestResponseBody(res *goa.ServiceError) *ReceiveThirdPartyPushDataBadRequestResponseBody {
	body := &ReceiveThirdPartyPushDataBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewReceiveThirdPartyPushDataInternalServerErrorResponseBody builds the HTTP
// response body from the result of the "ReceiveThirdPartyPushData" endpoint of
// the "ActualTime" service.
func NewReceiveThirdPartyPushDataInternalServerErrorResponseBody(res *goa.ServiceError) *ReceiveThirdPartyPushDataInternalServerErrorResponseBody {
	body := &ReceiveThirdPartyPushDataInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewReceiveThirdPartyPushDataPayload builds a ActualTime service
// ReceiveThirdPartyPushData endpoint payload.
func NewReceiveThirdPartyPushDataPayload(body *ReceiveThirdPartyPushDataRequestBody) *actualtime.ReceiveThirdPartyPushDataPayload {
	v := &actualtime.ReceiveThirdPartyPushDataPayload{
		MethodName: *body.MethodName,
		Count:      *body.Count,
		Data:       body.Data,
	}

	return v
}

// ValidateReceiveThirdPartyPushDataRequestBody runs the validations defined on
// ReceiveThirdPartyPushDataRequestBody
func ValidateReceiveThirdPartyPushDataRequestBody(body *ReceiveThirdPartyPushDataRequestBody) (err error) {
	if body.MethodName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("methodName", "body"))
	}
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	return
}
