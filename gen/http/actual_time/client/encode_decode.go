// Code generated by goa v3.2.4, DO NOT EDIT.
//
// ActualTime HTTP client encoders and decoders
//
// Command:
// $ goa gen boot/design

package client

import (
	actualtime "boot/gen/actual_time"
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetActualTimeDataRequest instantiates a HTTP request object with method
// and path set to call the "ActualTime" service "GetActualTimeData" endpoint
func (c *Client) BuildGetActualTimeDataRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetActualTimeDataActualTimePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ActualTime", "GetActualTimeData", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetActualTimeDataResponse returns a decoder for responses returned by
// the ActualTime GetActualTimeData endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetActualTimeDataResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetActualTimeDataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetActualTimeDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActualTime", "GetActualTimeData", err)
			}
			err = ValidateGetActualTimeDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActualTime", "GetActualTimeData", err)
			}
			res := NewGetActualTimeDataResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetActualTimeDataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActualTime", "GetActualTimeData", err)
			}
			err = ValidateGetActualTimeDataBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActualTime", "GetActualTimeData", err)
			}
			return nil, NewGetActualTimeDataBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetActualTimeDataInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActualTime", "GetActualTimeData", err)
			}
			err = ValidateGetActualTimeDataInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActualTime", "GetActualTimeData", err)
			}
			return nil, NewGetActualTimeDataInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ActualTime", "GetActualTimeData", resp.StatusCode, string(body))
		}
	}
}

// BuildReceiveThirdPartyPushDataRequest instantiates a HTTP request object
// with method and path set to call the "ActualTime" service
// "ReceiveThirdPartyPushData" endpoint
func (c *Client) BuildReceiveThirdPartyPushDataRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReceiveThirdPartyPushDataActualTimePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ActualTime", "ReceiveThirdPartyPushData", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeReceiveThirdPartyPushDataRequest returns an encoder for requests sent
// to the ActualTime ReceiveThirdPartyPushData server.
func EncodeReceiveThirdPartyPushDataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*actualtime.ReceiveThirdPartyPushDataPayload)
		if !ok {
			return goahttp.ErrInvalidType("ActualTime", "ReceiveThirdPartyPushData", "*actualtime.ReceiveThirdPartyPushDataPayload", v)
		}
		body := NewReceiveThirdPartyPushDataRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("ActualTime", "ReceiveThirdPartyPushData", err)
		}
		return nil
	}
}

// DecodeReceiveThirdPartyPushDataResponse returns a decoder for responses
// returned by the ActualTime ReceiveThirdPartyPushData endpoint. restoreBody
// controls whether the response body should be restored after having been read.
// DecodeReceiveThirdPartyPushDataResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeReceiveThirdPartyPushDataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ReceiveThirdPartyPushDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActualTime", "ReceiveThirdPartyPushData", err)
			}
			err = ValidateReceiveThirdPartyPushDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActualTime", "ReceiveThirdPartyPushData", err)
			}
			res := NewReceiveThirdPartyPushDataResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ReceiveThirdPartyPushDataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActualTime", "ReceiveThirdPartyPushData", err)
			}
			err = ValidateReceiveThirdPartyPushDataBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActualTime", "ReceiveThirdPartyPushData", err)
			}
			return nil, NewReceiveThirdPartyPushDataBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body ReceiveThirdPartyPushDataInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ActualTime", "ReceiveThirdPartyPushData", err)
			}
			err = ValidateReceiveThirdPartyPushDataInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("ActualTime", "ReceiveThirdPartyPushData", err)
			}
			return nil, NewReceiveThirdPartyPushDataInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ActualTime", "ReceiveThirdPartyPushData", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCanalDataRespResponseBodyToActualtimeCanalDataResp builds a value
// of type *actualtime.CanalDataResp from a value of type
// *CanalDataRespResponseBody.
func unmarshalCanalDataRespResponseBodyToActualtimeCanalDataResp(v *CanalDataRespResponseBody) *actualtime.CanalDataResp {
	res := &actualtime.CanalDataResp{
		DataType: *v.DataType,
		DataInfo: v.DataInfo,
	}

	return res
}
