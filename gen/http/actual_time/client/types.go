// Code generated by goa v3.2.4, DO NOT EDIT.
//
// ActualTime HTTP client types
//
// Command:
// $ goa gen boot/design

package client

import (
	actualtime "boot/gen/actual_time"

	goa "goa.design/goa/v3/pkg"
)

// ReceiveThirdPartyPushDataRequestBody is the type of the "ActualTime" service
// "ReceiveThirdPartyPushData" endpoint HTTP request body.
type ReceiveThirdPartyPushDataRequestBody struct {
	// 推送的具体方法
	MethodName int `form:"methodName" json:"methodName" xml:"methodName"`
	// 数据数量
	Count int `form:"count" json:"count" xml:"count"`
	// 第三方推送数据
	Data interface{} `form:"data" json:"data" xml:"data"`
}

// GetActualTimeDataResponseBody is the type of the "ActualTime" service
// "GetActualTimeData" endpoint HTTP response body.
type GetActualTimeDataResponseBody struct {
	// 错误码
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string                    `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data   *CanalDataRespResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ReceiveThirdPartyPushDataResponseBody is the type of the "ActualTime"
// service "ReceiveThirdPartyPushData" endpoint HTTP response body.
type ReceiveThirdPartyPushDataResponseBody struct {
	// 错误码
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	// success
	Result *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// GetActualTimeDataBadRequestResponseBody is the type of the "ActualTime"
// service "GetActualTimeData" endpoint HTTP response body for the
// "bad_request" error.
type GetActualTimeDataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetActualTimeDataInternalServerErrorResponseBody is the type of the
// "ActualTime" service "GetActualTimeData" endpoint HTTP response body for the
// "internal_server_error" error.
type GetActualTimeDataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ReceiveThirdPartyPushDataBadRequestResponseBody is the type of the
// "ActualTime" service "ReceiveThirdPartyPushData" endpoint HTTP response body
// for the "bad_request" error.
type ReceiveThirdPartyPushDataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ReceiveThirdPartyPushDataInternalServerErrorResponseBody is the type of the
// "ActualTime" service "ReceiveThirdPartyPushData" endpoint HTTP response body
// for the "internal_server_error" error.
type ReceiveThirdPartyPushDataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CanalDataRespResponseBody is used to define fields on response body types.
type CanalDataRespResponseBody struct {
	// 数据类别
	DataType *int32 `form:"dataType,omitempty" json:"dataType,omitempty" xml:"dataType,omitempty"`
	// 数据
	DataInfo interface{} `form:"dataInfo,omitempty" json:"dataInfo,omitempty" xml:"dataInfo,omitempty"`
}

// NewReceiveThirdPartyPushDataRequestBody builds the HTTP request body from
// the payload of the "ReceiveThirdPartyPushData" endpoint of the "ActualTime"
// service.
func NewReceiveThirdPartyPushDataRequestBody(p *actualtime.ReceiveThirdPartyPushDataPayload) *ReceiveThirdPartyPushDataRequestBody {
	body := &ReceiveThirdPartyPushDataRequestBody{
		MethodName: p.MethodName,
		Count:      p.Count,
		Data:       p.Data,
	}
	return body
}

// NewGetActualTimeDataResultOK builds a "ActualTime" service
// "GetActualTimeData" endpoint result from a HTTP "OK" response.
func NewGetActualTimeDataResultOK(body *GetActualTimeDataResponseBody) *actualtime.GetActualTimeDataResult {
	v := &actualtime.GetActualTimeDataResult{
		Errcode: *body.Errcode,
		Errmsg:  *body.Errmsg,
	}
	v.Data = unmarshalCanalDataRespResponseBodyToActualtimeCanalDataResp(body.Data)

	return v
}

// NewGetActualTimeDataBadRequest builds a ActualTime service GetActualTimeData
// endpoint bad_request error.
func NewGetActualTimeDataBadRequest(body *GetActualTimeDataBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetActualTimeDataInternalServerError builds a ActualTime service
// GetActualTimeData endpoint internal_server_error error.
func NewGetActualTimeDataInternalServerError(body *GetActualTimeDataInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewReceiveThirdPartyPushDataResultOK builds a "ActualTime" service
// "ReceiveThirdPartyPushData" endpoint result from a HTTP "OK" response.
func NewReceiveThirdPartyPushDataResultOK(body *ReceiveThirdPartyPushDataResponseBody) *actualtime.ReceiveThirdPartyPushDataResult {
	v := &actualtime.ReceiveThirdPartyPushDataResult{
		Errcode: *body.Errcode,
		Errmsg:  *body.Errmsg,
		Result:  *body.Result,
	}

	return v
}

// NewReceiveThirdPartyPushDataBadRequest builds a ActualTime service
// ReceiveThirdPartyPushData endpoint bad_request error.
func NewReceiveThirdPartyPushDataBadRequest(body *ReceiveThirdPartyPushDataBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewReceiveThirdPartyPushDataInternalServerError builds a ActualTime service
// ReceiveThirdPartyPushData endpoint internal_server_error error.
func NewReceiveThirdPartyPushDataInternalServerError(body *ReceiveThirdPartyPushDataInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetActualTimeDataResponseBody runs the validations defined on
// GetActualTimeDataResponseBody
func ValidateGetActualTimeDataResponseBody(body *GetActualTimeDataResponseBody) (err error) {
	if body.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "body"))
	}
	if body.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Errcode != nil {
		if *body.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 0, true))
		}
	}
	if body.Errcode != nil {
		if *body.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 999999, false))
		}
	}
	if body.Data != nil {
		if err2 := ValidateCanalDataRespResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateReceiveThirdPartyPushDataResponseBody runs the validations defined
// on ReceiveThirdPartyPushDataResponseBody
func ValidateReceiveThirdPartyPushDataResponseBody(body *ReceiveThirdPartyPushDataResponseBody) (err error) {
	if body.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "body"))
	}
	if body.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "body"))
	}
	if body.Result == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("result", "body"))
	}
	if body.Errcode != nil {
		if *body.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 0, true))
		}
	}
	if body.Errcode != nil {
		if *body.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 999999, false))
		}
	}
	return
}

// ValidateGetActualTimeDataBadRequestResponseBody runs the validations defined
// on GetActualTimeData_bad_request_Response_Body
func ValidateGetActualTimeDataBadRequestResponseBody(body *GetActualTimeDataBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetActualTimeDataInternalServerErrorResponseBody runs the
// validations defined on GetActualTimeData_internal_server_error_Response_Body
func ValidateGetActualTimeDataInternalServerErrorResponseBody(body *GetActualTimeDataInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateReceiveThirdPartyPushDataBadRequestResponseBody runs the validations
// defined on ReceiveThirdPartyPushData_bad_request_Response_Body
func ValidateReceiveThirdPartyPushDataBadRequestResponseBody(body *ReceiveThirdPartyPushDataBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateReceiveThirdPartyPushDataInternalServerErrorResponseBody runs the
// validations defined on
// ReceiveThirdPartyPushData_internal_server_error_Response_Body
func ValidateReceiveThirdPartyPushDataInternalServerErrorResponseBody(body *ReceiveThirdPartyPushDataInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCanalDataRespResponseBody runs the validations defined on
// CanalDataRespResponseBody
func ValidateCanalDataRespResponseBody(body *CanalDataRespResponseBody) (err error) {
	if body.DataType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("dataType", "body"))
	}
	if body.DataInfo == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("dataInfo", "body"))
	}
	return
}
