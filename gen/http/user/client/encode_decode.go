// Code generated by goa v3.2.3, DO NOT EDIT.
//
// User HTTP client encoders and decoders
//
// Command:
// $ goa gen boot/design

package client

import (
	user "boot/gen/user"
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildLoginByUsernameRequest instantiates a HTTP request object with method
// and path set to call the "User" service "LoginByUsername" endpoint
func (c *Client) BuildLoginByUsernameRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginByUsernameUserPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("User", "LoginByUsername", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoginByUsernameRequest returns an encoder for requests sent to the
// User LoginByUsername server.
func EncodeLoginByUsernameRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.LoginByUsernamePayload)
		if !ok {
			return goahttp.ErrInvalidType("User", "LoginByUsername", "*user.LoginByUsernamePayload", v)
		}
		body := NewLoginByUsernameRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("User", "LoginByUsername", err)
		}
		return nil
	}
}

// DecodeLoginByUsernameResponse returns a decoder for responses returned by
// the User LoginByUsername endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeLoginByUsernameResponse may return the following errors:
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeLoginByUsernameResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LoginByUsernameResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "LoginByUsername", err)
			}
			err = ValidateLoginByUsernameResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "LoginByUsername", err)
			}
			res := NewLoginByUsernameResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body LoginByUsernameInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "LoginByUsername", err)
			}
			err = ValidateLoginByUsernameInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "LoginByUsername", err)
			}
			return nil, NewLoginByUsernameInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body LoginByUsernameBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "LoginByUsername", err)
			}
			err = ValidateLoginByUsernameBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "LoginByUsername", err)
			}
			return nil, NewLoginByUsernameBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("User", "LoginByUsername", resp.StatusCode, string(body))
		}
	}
}

// BuildLoginBySmsCodeRequest instantiates a HTTP request object with method
// and path set to call the "User" service "LoginBySmsCode" endpoint
func (c *Client) BuildLoginBySmsCodeRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginBySmsCodeUserPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("User", "LoginBySmsCode", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoginBySmsCodeRequest returns an encoder for requests sent to the User
// LoginBySmsCode server.
func EncodeLoginBySmsCodeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.LoginBySmsCodePayload)
		if !ok {
			return goahttp.ErrInvalidType("User", "LoginBySmsCode", "*user.LoginBySmsCodePayload", v)
		}
		body := NewLoginBySmsCodeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("User", "LoginBySmsCode", err)
		}
		return nil
	}
}

// DecodeLoginBySmsCodeResponse returns a decoder for responses returned by the
// User LoginBySmsCode endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeLoginBySmsCodeResponse may return the following errors:
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeLoginBySmsCodeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LoginBySmsCodeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "LoginBySmsCode", err)
			}
			err = ValidateLoginBySmsCodeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "LoginBySmsCode", err)
			}
			res := NewLoginBySmsCodeResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body LoginBySmsCodeInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "LoginBySmsCode", err)
			}
			err = ValidateLoginBySmsCodeInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "LoginBySmsCode", err)
			}
			return nil, NewLoginBySmsCodeInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body LoginBySmsCodeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "LoginBySmsCode", err)
			}
			err = ValidateLoginBySmsCodeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "LoginBySmsCode", err)
			}
			return nil, NewLoginBySmsCodeBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("User", "LoginBySmsCode", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdatePasswordRequest instantiates a HTTP request object with method
// and path set to call the "User" service "UpdatePassword" endpoint
func (c *Client) BuildUpdatePasswordRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdatePasswordUserPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("User", "UpdatePassword", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdatePasswordRequest returns an encoder for requests sent to the User
// UpdatePassword server.
func EncodeUpdatePasswordRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.UpdatePasswordPayload)
		if !ok {
			return goahttp.ErrInvalidType("User", "UpdatePassword", "*user.UpdatePasswordPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdatePasswordRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("User", "UpdatePassword", err)
		}
		return nil
	}
}

// DecodeUpdatePasswordResponse returns a decoder for responses returned by the
// User UpdatePassword endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdatePasswordResponse may return the following errors:
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeUpdatePasswordResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdatePasswordResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "UpdatePassword", err)
			}
			err = ValidateUpdatePasswordResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "UpdatePassword", err)
			}
			res := NewUpdatePasswordResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body UpdatePasswordInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "UpdatePassword", err)
			}
			err = ValidateUpdatePasswordInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "UpdatePassword", err)
			}
			return nil, NewUpdatePasswordInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body UpdatePasswordBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "UpdatePassword", err)
			}
			err = ValidateUpdatePasswordBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "UpdatePassword", err)
			}
			return nil, NewUpdatePasswordBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("User", "UpdatePassword", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCaptchaImageRequest instantiates a HTTP request object with method
// and path set to call the "User" service "GetCaptchaImage" endpoint
func (c *Client) BuildGetCaptchaImageRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCaptchaImageUserPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("User", "GetCaptchaImage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetCaptchaImageResponse returns a decoder for responses returned by
// the User GetCaptchaImage endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetCaptchaImageResponse may return the following errors:
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeGetCaptchaImageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCaptchaImageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "GetCaptchaImage", err)
			}
			err = ValidateGetCaptchaImageResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "GetCaptchaImage", err)
			}
			res := NewGetCaptchaImageResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body GetCaptchaImageInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "GetCaptchaImage", err)
			}
			err = ValidateGetCaptchaImageInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "GetCaptchaImage", err)
			}
			return nil, NewGetCaptchaImageInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body GetCaptchaImageBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "GetCaptchaImage", err)
			}
			err = ValidateGetCaptchaImageBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "GetCaptchaImage", err)
			}
			return nil, NewGetCaptchaImageBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("User", "GetCaptchaImage", resp.StatusCode, string(body))
		}
	}
}

// BuildSendSmsCodeRequest instantiates a HTTP request object with method and
// path set to call the "User" service "SendSmsCode" endpoint
func (c *Client) BuildSendSmsCodeRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendSmsCodeUserPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("User", "SendSmsCode", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendSmsCodeRequest returns an encoder for requests sent to the User
// SendSmsCode server.
func EncodeSendSmsCodeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.SendSmsCodePayload)
		if !ok {
			return goahttp.ErrInvalidType("User", "SendSmsCode", "*user.SendSmsCodePayload", v)
		}
		body := NewSendSmsCodeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("User", "SendSmsCode", err)
		}
		return nil
	}
}

// DecodeSendSmsCodeResponse returns a decoder for responses returned by the
// User SendSmsCode endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSendSmsCodeResponse may return the following errors:
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeSendSmsCodeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SendSmsCodeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "SendSmsCode", err)
			}
			err = ValidateSendSmsCodeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "SendSmsCode", err)
			}
			res := NewSendSmsCodeResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body SendSmsCodeInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "SendSmsCode", err)
			}
			err = ValidateSendSmsCodeInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "SendSmsCode", err)
			}
			return nil, NewSendSmsCodeInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body SendSmsCodeBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("User", "SendSmsCode", err)
			}
			err = ValidateSendSmsCodeBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("User", "SendSmsCode", err)
			}
			return nil, NewSendSmsCodeBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("User", "SendSmsCode", resp.StatusCode, string(body))
		}
	}
}

// unmarshalSessionResponseBodyToUserSession builds a value of type
// *user.Session from a value of type *SessionResponseBody.
func unmarshalSessionResponseBodyToUserSession(v *SessionResponseBody) *user.Session {
	if v == nil {
		return nil
	}
	res := &user.Session{}
	res.User = unmarshalUserResponseBodyToUserUser(v.User)
	res.Credentials = unmarshalCredentialsResponseBodyToUserCredentials(v.Credentials)

	return res
}

// unmarshalUserResponseBodyToUserUser builds a value of type *user.User from a
// value of type *UserResponseBody.
func unmarshalUserResponseBodyToUserUser(v *UserResponseBody) *user.User {
	res := &user.User{
		ID:       *v.ID,
		Username: *v.Username,
		Nickname: *v.Nickname,
		Mobile:   *v.Mobile,
		IsActive: *v.IsActive,
	}

	return res
}

// unmarshalCredentialsResponseBodyToUserCredentials builds a value of type
// *user.Credentials from a value of type *CredentialsResponseBody.
func unmarshalCredentialsResponseBodyToUserCredentials(v *CredentialsResponseBody) *user.Credentials {
	res := &user.Credentials{
		Token:     *v.Token,
		ExpiresIn: *v.ExpiresIn,
	}

	return res
}

// unmarshalSuccessResultResponseBodyToUserSuccessResult builds a value of type
// *user.SuccessResult from a value of type *SuccessResultResponseBody.
func unmarshalSuccessResultResponseBodyToUserSuccessResult(v *SuccessResultResponseBody) *user.SuccessResult {
	if v == nil {
		return nil
	}
	res := &user.SuccessResult{
		OK: *v.OK,
	}

	return res
}

// unmarshalCaptchaResponseBodyToUserCaptcha builds a value of type
// *user.Captcha from a value of type *CaptchaResponseBody.
func unmarshalCaptchaResponseBodyToUserCaptcha(v *CaptchaResponseBody) *user.Captcha {
	if v == nil {
		return nil
	}
	res := &user.Captcha{
		Image:     *v.Image,
		CaptchaID: *v.CaptchaID,
	}

	return res
}
