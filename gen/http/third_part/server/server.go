// Code generated by goa v3.2.4, DO NOT EDIT.
//
// thirdPart HTTP server
//
// Command:
// $ goa gen boot/design

package server

import (
	thirdpart "boot/gen/third_part"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the thirdPart service endpoint HTTP handlers.
type Server struct {
	Mounts            []*MountPoint
	GetActualTimeData http.Handler
	GormRelatedSearch http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the thirdPart service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *thirdpart.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetActualTimeData", "GET", "/api/third_part/get_hall_management_data"},
			{"GormRelatedSearch", "GET", "/api/third_part/gorm_related_search"},
		},
		GetActualTimeData: NewGetActualTimeDataHandler(e.GetActualTimeData, mux, decoder, encoder, errhandler, formatter),
		GormRelatedSearch: NewGormRelatedSearchHandler(e.GormRelatedSearch, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "thirdPart" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetActualTimeData = m(s.GetActualTimeData)
	s.GormRelatedSearch = m(s.GormRelatedSearch)
}

// Mount configures the mux to serve the thirdPart endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetActualTimeDataHandler(mux, h.GetActualTimeData)
	MountGormRelatedSearchHandler(mux, h.GormRelatedSearch)
}

// MountGetActualTimeDataHandler configures the mux to serve the "thirdPart"
// service "GetActualTimeData" endpoint.
func MountGetActualTimeDataHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/third_part/get_hall_management_data", f)
}

// NewGetActualTimeDataHandler creates a HTTP handler which loads the HTTP
// request and calls the "thirdPart" service "GetActualTimeData" endpoint.
func NewGetActualTimeDataHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetActualTimeDataResponse(encoder)
		encodeError    = EncodeGetActualTimeDataError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetActualTimeData")
		ctx = context.WithValue(ctx, goa.ServiceKey, "thirdPart")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGormRelatedSearchHandler configures the mux to serve the "thirdPart"
// service "GormRelatedSearch" endpoint.
func MountGormRelatedSearchHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/api/third_part/gorm_related_search", f)
}

// NewGormRelatedSearchHandler creates a HTTP handler which loads the HTTP
// request and calls the "thirdPart" service "GormRelatedSearch" endpoint.
func NewGormRelatedSearchHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGormRelatedSearchResponse(encoder)
		encodeError    = EncodeGormRelatedSearchError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GormRelatedSearch")
		ctx = context.WithValue(ctx, goa.ServiceKey, "thirdPart")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
