// Code generated by goa v3.2.4, DO NOT EDIT.
//
// thirdPart HTTP client encoders and decoders
//
// Command:
// $ goa gen boot/design

package client

import (
	thirdpart "boot/gen/third_part"
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetActualTimeDataRequest instantiates a HTTP request object with method
// and path set to call the "thirdPart" service "GetActualTimeData" endpoint
func (c *Client) BuildGetActualTimeDataRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetActualTimeDataThirdPartPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("thirdPart", "GetActualTimeData", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetActualTimeDataResponse returns a decoder for responses returned by
// the thirdPart GetActualTimeData endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetActualTimeDataResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetActualTimeDataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetActualTimeDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("thirdPart", "GetActualTimeData", err)
			}
			err = ValidateGetActualTimeDataResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("thirdPart", "GetActualTimeData", err)
			}
			res := NewGetActualTimeDataResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetActualTimeDataBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("thirdPart", "GetActualTimeData", err)
			}
			err = ValidateGetActualTimeDataBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("thirdPart", "GetActualTimeData", err)
			}
			return nil, NewGetActualTimeDataBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetActualTimeDataInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("thirdPart", "GetActualTimeData", err)
			}
			err = ValidateGetActualTimeDataInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("thirdPart", "GetActualTimeData", err)
			}
			return nil, NewGetActualTimeDataInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("thirdPart", "GetActualTimeData", resp.StatusCode, string(body))
		}
	}
}

// BuildGormRelatedSearchRequest instantiates a HTTP request object with method
// and path set to call the "thirdPart" service "GormRelatedSearch" endpoint
func (c *Client) BuildGormRelatedSearchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GormRelatedSearchThirdPartPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("thirdPart", "GormRelatedSearch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGormRelatedSearchResponse returns a decoder for responses returned by
// the thirdPart GormRelatedSearch endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGormRelatedSearchResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGormRelatedSearchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GormRelatedSearchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("thirdPart", "GormRelatedSearch", err)
			}
			err = ValidateGormRelatedSearchResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("thirdPart", "GormRelatedSearch", err)
			}
			res := NewGormRelatedSearchResultOK(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GormRelatedSearchBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("thirdPart", "GormRelatedSearch", err)
			}
			err = ValidateGormRelatedSearchBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("thirdPart", "GormRelatedSearch", err)
			}
			return nil, NewGormRelatedSearchBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GormRelatedSearchInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("thirdPart", "GormRelatedSearch", err)
			}
			err = ValidateGormRelatedSearchInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("thirdPart", "GormRelatedSearch", err)
			}
			return nil, NewGormRelatedSearchInternalServerError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("thirdPart", "GormRelatedSearch", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHallManagementRespResponseBodyToThirdpartHallManagementResp builds
// a value of type *thirdpart.HallManagementResp from a value of type
// *HallManagementRespResponseBody.
func unmarshalHallManagementRespResponseBodyToThirdpartHallManagementResp(v *HallManagementRespResponseBody) *thirdpart.HallManagementResp {
	res := &thirdpart.HallManagementResp{
		CardNum: *v.CardNum,
		Name:    *v.Name,
		OuName:  *v.OuName,
	}

	return res
}

// unmarshalLegalPersonUserRespResponseBodyToThirdpartLegalPersonUserResp
// builds a value of type *thirdpart.LegalPersonUserResp from a value of type
// *LegalPersonUserRespResponseBody.
func unmarshalLegalPersonUserRespResponseBodyToThirdpartLegalPersonUserResp(v *LegalPersonUserRespResponseBody) *thirdpart.LegalPersonUserResp {
	res := &thirdpart.LegalPersonUserResp{
		ID:   *v.ID,
		Name: *v.Name,
	}
	res.Companies = make([]*thirdpart.CompanyProfileResp, len(v.Companies))
	for i, val := range v.Companies {
		res.Companies[i] = unmarshalCompanyProfileRespResponseBodyToThirdpartCompanyProfileResp(val)
	}

	return res
}

// unmarshalCompanyProfileRespResponseBodyToThirdpartCompanyProfileResp builds
// a value of type *thirdpart.CompanyProfileResp from a value of type
// *CompanyProfileRespResponseBody.
func unmarshalCompanyProfileRespResponseBodyToThirdpartCompanyProfileResp(v *CompanyProfileRespResponseBody) *thirdpart.CompanyProfileResp {
	res := &thirdpart.CompanyProfileResp{
		Industry: *v.Industry,
		Name:     *v.Name,
		UserID:   *v.UserID,
	}

	return res
}
