// Code generated by goa v3.2.4, DO NOT EDIT.
//
// thirdPart HTTP client types
//
// Command:
// $ goa gen boot/design

package client

import (
	thirdpart "boot/gen/third_part"

	goa "goa.design/goa/v3/pkg"
)

// GetActualTimeDataResponseBody is the type of the "thirdPart" service
// "GetActualTimeData" endpoint HTTP response body.
type GetActualTimeDataResponseBody struct {
	// 错误码
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string                           `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data   []*HallManagementRespResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// GormRelatedSearchResponseBody is the type of the "thirdPart" service
// "GormRelatedSearch" endpoint HTTP response body.
type GormRelatedSearchResponseBody struct {
	// 错误码
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string                            `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data   []*LegalPersonUserRespResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// GetActualTimeDataBadRequestResponseBody is the type of the "thirdPart"
// service "GetActualTimeData" endpoint HTTP response body for the
// "bad_request" error.
type GetActualTimeDataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetActualTimeDataInternalServerErrorResponseBody is the type of the
// "thirdPart" service "GetActualTimeData" endpoint HTTP response body for the
// "internal_server_error" error.
type GetActualTimeDataInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GormRelatedSearchBadRequestResponseBody is the type of the "thirdPart"
// service "GormRelatedSearch" endpoint HTTP response body for the
// "bad_request" error.
type GormRelatedSearchBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GormRelatedSearchInternalServerErrorResponseBody is the type of the
// "thirdPart" service "GormRelatedSearch" endpoint HTTP response body for the
// "internal_server_error" error.
type GormRelatedSearchInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// HallManagementRespResponseBody is used to define fields on response body
// types.
type HallManagementRespResponseBody struct {
	// 身份证
	CardNum *string `form:"cardNum,omitempty" json:"cardNum,omitempty" xml:"cardNum,omitempty"`
	// 名字
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 部门名字
	OuName *string `form:"ouName,omitempty" json:"ouName,omitempty" xml:"ouName,omitempty"`
}

// LegalPersonUserRespResponseBody is used to define fields on response body
// types.
type LegalPersonUserRespResponseBody struct {
	// 用户Id
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 名字
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 公司
	Companies []*CompanyProfileRespResponseBody `form:"companies,omitempty" json:"companies,omitempty" xml:"companies,omitempty"`
}

// CompanyProfileRespResponseBody is used to define fields on response body
// types.
type CompanyProfileRespResponseBody struct {
	// 行业Id
	Industry *int `form:"industry,omitempty" json:"industry,omitempty" xml:"industry,omitempty"`
	// 公司名字
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 法人名字
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
}

// NewGetActualTimeDataResultOK builds a "thirdPart" service
// "GetActualTimeData" endpoint result from a HTTP "OK" response.
func NewGetActualTimeDataResultOK(body *GetActualTimeDataResponseBody) *thirdpart.GetActualTimeDataResult {
	v := &thirdpart.GetActualTimeDataResult{
		Errcode: *body.Errcode,
		Errmsg:  *body.Errmsg,
	}
	v.Data = make([]*thirdpart.HallManagementResp, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalHallManagementRespResponseBodyToThirdpartHallManagementResp(val)
	}

	return v
}

// NewGetActualTimeDataBadRequest builds a thirdPart service GetActualTimeData
// endpoint bad_request error.
func NewGetActualTimeDataBadRequest(body *GetActualTimeDataBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetActualTimeDataInternalServerError builds a thirdPart service
// GetActualTimeData endpoint internal_server_error error.
func NewGetActualTimeDataInternalServerError(body *GetActualTimeDataInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGormRelatedSearchResultOK builds a "thirdPart" service
// "GormRelatedSearch" endpoint result from a HTTP "OK" response.
func NewGormRelatedSearchResultOK(body *GormRelatedSearchResponseBody) *thirdpart.GormRelatedSearchResult {
	v := &thirdpart.GormRelatedSearchResult{
		Errcode: *body.Errcode,
		Errmsg:  *body.Errmsg,
	}
	v.Data = make([]*thirdpart.LegalPersonUserResp, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalLegalPersonUserRespResponseBodyToThirdpartLegalPersonUserResp(val)
	}

	return v
}

// NewGormRelatedSearchBadRequest builds a thirdPart service GormRelatedSearch
// endpoint bad_request error.
func NewGormRelatedSearchBadRequest(body *GormRelatedSearchBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGormRelatedSearchInternalServerError builds a thirdPart service
// GormRelatedSearch endpoint internal_server_error error.
func NewGormRelatedSearchInternalServerError(body *GormRelatedSearchInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetActualTimeDataResponseBody runs the validations defined on
// GetActualTimeDataResponseBody
func ValidateGetActualTimeDataResponseBody(body *GetActualTimeDataResponseBody) (err error) {
	if body.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "body"))
	}
	if body.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Errcode != nil {
		if *body.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 0, true))
		}
	}
	if body.Errcode != nil {
		if *body.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 999999, false))
		}
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateHallManagementRespResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGormRelatedSearchResponseBody runs the validations defined on
// GormRelatedSearchResponseBody
func ValidateGormRelatedSearchResponseBody(body *GormRelatedSearchResponseBody) (err error) {
	if body.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "body"))
	}
	if body.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "body"))
	}
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Errcode != nil {
		if *body.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 0, true))
		}
	}
	if body.Errcode != nil {
		if *body.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 999999, false))
		}
	}
	for _, e := range body.Data {
		if e != nil {
			if err2 := ValidateLegalPersonUserRespResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetActualTimeDataBadRequestResponseBody runs the validations defined
// on GetActualTimeData_bad_request_Response_Body
func ValidateGetActualTimeDataBadRequestResponseBody(body *GetActualTimeDataBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetActualTimeDataInternalServerErrorResponseBody runs the
// validations defined on GetActualTimeData_internal_server_error_Response_Body
func ValidateGetActualTimeDataInternalServerErrorResponseBody(body *GetActualTimeDataInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGormRelatedSearchBadRequestResponseBody runs the validations defined
// on GormRelatedSearch_bad_request_Response_Body
func ValidateGormRelatedSearchBadRequestResponseBody(body *GormRelatedSearchBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGormRelatedSearchInternalServerErrorResponseBody runs the
// validations defined on GormRelatedSearch_internal_server_error_Response_Body
func ValidateGormRelatedSearchInternalServerErrorResponseBody(body *GormRelatedSearchInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateHallManagementRespResponseBody runs the validations defined on
// HallManagementRespResponseBody
func ValidateHallManagementRespResponseBody(body *HallManagementRespResponseBody) (err error) {
	if body.CardNum == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cardNum", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.OuName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ouName", "body"))
	}
	return
}

// ValidateLegalPersonUserRespResponseBody runs the validations defined on
// LegalPersonUserRespResponseBody
func ValidateLegalPersonUserRespResponseBody(body *LegalPersonUserRespResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Companies == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("companies", "body"))
	}
	for _, e := range body.Companies {
		if e != nil {
			if err2 := ValidateCompanyProfileRespResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCompanyProfileRespResponseBody runs the validations defined on
// CompanyProfileRespResponseBody
func ValidateCompanyProfileRespResponseBody(body *CompanyProfileRespResponseBody) (err error) {
	if body.Industry == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("industry", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	return
}
