// Code generated by goa v3.0.9, DO NOT EDIT.
//
// starter HTTP server types
//
// Command:
// $ goa gen starter/design

package server

import (
	starter "starter/gen/starter"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// LoginByUsernameRequestBody is the type of the "starter" service
// "LoginByUsername" endpoint HTTP request body.
type LoginByUsernameRequestBody struct {
	// 用户名
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 密码
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// LoginByUsernameResponseBody is the type of the "starter" service
// "LoginByUsername" endpoint HTTP response body.
type LoginByUsernameResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string               `form:"errmsg" json:"errmsg" xml:"errmsg"`
	Data   *SessionResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// LoginByUsernameInternalServerErrorResponseBody is the type of the "starter"
// service "LoginByUsername" endpoint HTTP response body for the
// "internal_server_error" error.
type LoginByUsernameInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginByUsernameBadRequestResponseBody is the type of the "starter" service
// "LoginByUsername" endpoint HTTP response body for the "bad_request" error.
type LoginByUsernameBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SessionResponseBody is used to define fields on response body types.
type SessionResponseBody struct {
	User        *UserResponseBody        `form:"user" json:"user" xml:"user"`
	Credentials *CredentialsResponseBody `form:"credentials" json:"credentials" xml:"credentials"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 用户名
	Username string `form:"username" json:"username" xml:"username"`
	// 昵称
	Nickname string `form:"nickname" json:"nickname" xml:"nickname"`
	// 手机号
	Mobile string `form:"mobile" json:"mobile" xml:"mobile"`
	// 是否可用
	IsActive bool `form:"isActive" json:"isActive" xml:"isActive"`
}

// CredentialsResponseBody is used to define fields on response body types.
type CredentialsResponseBody struct {
	// JWT token
	Token string `form:"token" json:"token" xml:"token"`
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
}

// NewLoginByUsernameResponseBody builds the HTTP response body from the result
// of the "LoginByUsername" endpoint of the "starter" service.
func NewLoginByUsernameResponseBody(res *starter.LoginByUsernameResult) *LoginByUsernameResponseBody {
	body := &LoginByUsernameResponseBody{
		Errcode: res.Errcode,
		Errmsg:  res.Errmsg,
	}
	if res.Data != nil {
		body.Data = marshalStarterSessionToSessionResponseBody(res.Data)
	}
	return body
}

// NewLoginByUsernameInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "LoginByUsername" endpoint of the "starter"
// service.
func NewLoginByUsernameInternalServerErrorResponseBody(res *goa.ServiceError) *LoginByUsernameInternalServerErrorResponseBody {
	body := &LoginByUsernameInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginByUsernameBadRequestResponseBody builds the HTTP response body from
// the result of the "LoginByUsername" endpoint of the "starter" service.
func NewLoginByUsernameBadRequestResponseBody(res *goa.ServiceError) *LoginByUsernameBadRequestResponseBody {
	body := &LoginByUsernameBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginByUsernamePayload builds a starter service LoginByUsername endpoint
// payload.
func NewLoginByUsernamePayload(body *LoginByUsernameRequestBody) *starter.LoginByUsernamePayload {
	v := &starter.LoginByUsernamePayload{
		Username: *body.Username,
		Password: *body.Password,
	}
	return v
}

// ValidateLoginByUsernameRequestBody runs the validations defined on
// LoginByUsernameRequestBody
func ValidateLoginByUsernameRequestBody(body *LoginByUsernameRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 1, true))
		}
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 128, false))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 1, true))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 128, false))
		}
	}
	return
}

// ValidateSessionResponseBody runs the validations defined on
// SessionResponseBody
func ValidateSessionResponseBody(body *SessionResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Credentials == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("credentials", "body"))
	}
	return
}
