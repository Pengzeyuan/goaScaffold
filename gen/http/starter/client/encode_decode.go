// Code generated by goa v3.0.9, DO NOT EDIT.
//
// starter HTTP client encoders and decoders
//
// Command:
// $ goa gen starter/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	starter "starter/gen/starter"

	goahttp "goa.design/goa/v3/http"
)

// BuildLoginByUsernameRequest instantiates a HTTP request object with method
// and path set to call the "starter" service "LoginByUsername" endpoint
func (c *Client) BuildLoginByUsernameRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginByUsernameStarterPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("starter", "LoginByUsername", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoginByUsernameRequest returns an encoder for requests sent to the
// starter LoginByUsername server.
func EncodeLoginByUsernameRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*starter.LoginByUsernamePayload)
		if !ok {
			return goahttp.ErrInvalidType("starter", "LoginByUsername", "*starter.LoginByUsernamePayload", v)
		}
		body := NewLoginByUsernameRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("starter", "LoginByUsername", err)
		}
		return nil
	}
}

// DecodeLoginByUsernameResponse returns a decoder for responses returned by
// the starter LoginByUsername endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeLoginByUsernameResponse may return the following errors:
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeLoginByUsernameResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LoginByUsernameResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("starter", "LoginByUsername", err)
			}
			err = ValidateLoginByUsernameResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("starter", "LoginByUsername", err)
			}
			res := NewLoginByUsernameResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body LoginByUsernameInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("starter", "LoginByUsername", err)
			}
			err = ValidateLoginByUsernameInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("starter", "LoginByUsername", err)
			}
			return nil, NewLoginByUsernameInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body LoginByUsernameBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("starter", "LoginByUsername", err)
			}
			err = ValidateLoginByUsernameBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("starter", "LoginByUsername", err)
			}
			return nil, NewLoginByUsernameBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("starter", "LoginByUsername", resp.StatusCode, string(body))
		}
	}
}

// unmarshalSessionResponseBodyToStarterSession builds a value of type
// *starter.Session from a value of type *SessionResponseBody.
func unmarshalSessionResponseBodyToStarterSession(v *SessionResponseBody) *starter.Session {
	if v == nil {
		return nil
	}
	res := &starter.Session{}
	res.User = unmarshalUserResponseBodyToStarterUser(v.User)
	res.Credentials = unmarshalCredentialsResponseBodyToStarterCredentials(v.Credentials)

	return res
}

// unmarshalUserResponseBodyToStarterUser builds a value of type *starter.User
// from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToStarterUser(v *UserResponseBody) *starter.User {
	res := &starter.User{
		ID:       *v.ID,
		Username: *v.Username,
		Nickname: *v.Nickname,
		Mobile:   *v.Mobile,
		IsActive: *v.IsActive,
	}

	return res
}

// unmarshalCredentialsResponseBodyToStarterCredentials builds a value of type
// *starter.Credentials from a value of type *CredentialsResponseBody.
func unmarshalCredentialsResponseBodyToStarterCredentials(v *CredentialsResponseBody) *starter.Credentials {
	res := &starter.Credentials{
		Token:     *v.Token,
		ExpiresIn: *v.ExpiresIn,
	}

	return res
}
