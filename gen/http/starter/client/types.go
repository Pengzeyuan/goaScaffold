// Code generated by goa v3.0.9, DO NOT EDIT.
//
// starter HTTP client types
//
// Command:
// $ goa gen starter/design

package client

import (
	starter "starter/gen/starter"

	goa "goa.design/goa/v3/pkg"
)

// LoginByUsernameRequestBody is the type of the "starter" service
// "LoginByUsername" endpoint HTTP request body.
type LoginByUsernameRequestBody struct {
	// 用户名
	Username string `form:"username" json:"username" xml:"username"`
	// 密码
	Password string `form:"password" json:"password" xml:"password"`
}

// LoginByUsernameResponseBody is the type of the "starter" service
// "LoginByUsername" endpoint HTTP response body.
type LoginByUsernameResponseBody struct {
	// 错误码
	Errcode *int `form:"errcode,omitempty" json:"errcode,omitempty" xml:"errcode,omitempty"`
	// 错误消息
	Errmsg *string              `form:"errmsg,omitempty" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data   *SessionResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// LoginByUsernameInternalServerErrorResponseBody is the type of the "starter"
// service "LoginByUsername" endpoint HTTP response body for the
// "internal_server_error" error.
type LoginByUsernameInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LoginByUsernameBadRequestResponseBody is the type of the "starter" service
// "LoginByUsername" endpoint HTTP response body for the "bad_request" error.
type LoginByUsernameBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SessionResponseBody is used to define fields on response body types.
type SessionResponseBody struct {
	User        *UserResponseBody        `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	Credentials *CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 用户名
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 昵称
	Nickname *string `form:"nickname,omitempty" json:"nickname,omitempty" xml:"nickname,omitempty"`
	// 手机号
	Mobile *string `form:"mobile,omitempty" json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 是否可用
	IsActive *bool `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
}

// CredentialsResponseBody is used to define fields on response body types.
type CredentialsResponseBody struct {
	// JWT token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
}

// NewLoginByUsernameRequestBody builds the HTTP request body from the payload
// of the "LoginByUsername" endpoint of the "starter" service.
func NewLoginByUsernameRequestBody(p *starter.LoginByUsernamePayload) *LoginByUsernameRequestBody {
	body := &LoginByUsernameRequestBody{
		Username: p.Username,
		Password: p.Password,
	}
	return body
}

// NewLoginByUsernameResultOK builds a "starter" service "LoginByUsername"
// endpoint result from a HTTP "OK" response.
func NewLoginByUsernameResultOK(body *LoginByUsernameResponseBody) *starter.LoginByUsernameResult {
	v := &starter.LoginByUsernameResult{
		Errcode: *body.Errcode,
		Errmsg:  *body.Errmsg,
	}
	if body.Data != nil {
		v.Data = unmarshalSessionResponseBodyToStarterSession(body.Data)
	}
	return v
}

// NewLoginByUsernameInternalServerError builds a starter service
// LoginByUsername endpoint internal_server_error error.
func NewLoginByUsernameInternalServerError(body *LoginByUsernameInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// NewLoginByUsernameBadRequest builds a starter service LoginByUsername
// endpoint bad_request error.
func NewLoginByUsernameBadRequest(body *LoginByUsernameBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}
	return v
}

// ValidateLoginByUsernameResponseBody runs the validations defined on
// LoginByUsernameResponseBody
func ValidateLoginByUsernameResponseBody(body *LoginByUsernameResponseBody) (err error) {
	if body.Errcode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errcode", "body"))
	}
	if body.Errmsg == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("errmsg", "body"))
	}
	if body.Errcode != nil {
		if *body.Errcode < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 0, true))
		}
	}
	if body.Errcode != nil {
		if *body.Errcode > 999999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.errcode", *body.Errcode, 999999, false))
		}
	}
	if body.Data != nil {
		if err2 := ValidateSessionResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateLoginByUsernameInternalServerErrorResponseBody runs the validations
// defined on LoginByUsername_internal_server_error_Response_Body
func ValidateLoginByUsernameInternalServerErrorResponseBody(body *LoginByUsernameInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLoginByUsernameBadRequestResponseBody runs the validations defined
// on LoginByUsername_bad_request_Response_Body
func ValidateLoginByUsernameBadRequestResponseBody(body *LoginByUsernameBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSessionResponseBody runs the validations defined on
// SessionResponseBody
func ValidateSessionResponseBody(body *SessionResponseBody) (err error) {
	if body.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "body"))
	}
	if body.Credentials == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("credentials", "body"))
	}
	if body.User != nil {
		if err2 := ValidateUserResponseBody(body.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Credentials != nil {
		if err2 := ValidateCredentialsResponseBody(body.Credentials); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Nickname == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nickname", "body"))
	}
	if body.Mobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mobile", "body"))
	}
	if body.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isActive", "body"))
	}
	return
}

// ValidateCredentialsResponseBody runs the validations defined on
// CredentialsResponseBody
func ValidateCredentialsResponseBody(body *CredentialsResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "body"))
	}
	return
}
