// Code generated by goa v3.0.9, DO NOT EDIT.
//
// starter HTTP client CLI support package
//
// Command:
// $ goa gen starter/design

package client

import (
	"encoding/json"
	"fmt"
	starter "starter/gen/starter"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildLoginByUsernamePayload builds the payload for the starter
// LoginByUsername endpoint from CLI flags.
func BuildLoginByUsernamePayload(starterLoginByUsernameBody string) (*starter.LoginByUsernamePayload, error) {
	var err error
	var body LoginByUsernameRequestBody
	{
		err = json.Unmarshal([]byte(starterLoginByUsernameBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"password\": \"password\",\n      \"username\": \"user\"\n   }'")
		}
		if utf8.RuneCountInString(body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", body.Username, utf8.RuneCountInString(body.Username), 1, true))
		}
		if utf8.RuneCountInString(body.Username) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", body.Username, utf8.RuneCountInString(body.Username), 128, false))
		}
		if utf8.RuneCountInString(body.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 1, true))
		}
		if utf8.RuneCountInString(body.Password) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 128, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &starter.LoginByUsernamePayload{
		Username: body.Username,
		Password: body.Password,
	}
	return v, nil
}
