// Code generated by goa v3.0.10, DO NOT EDIT.
//
// User service
//
// Command:
// $ goa gen starter/design

package user

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// 微服务
type Service interface {
	// 使用账号密码登录
	LoginByUsername(context.Context, *LoginByUsernamePayload) (res *LoginByUsernameResult, err error)
	// 使用短信验证码登录
	LoginBySmsCode(context.Context, *LoginBySmsCodePayload) (res *LoginBySmsCodeResult, err error)
	// 修改登录密码
	UpdatePassword(context.Context, *UpdatePasswordPayload) (res *UpdatePasswordResult, err error)
	// 获取图形验证码
	GetCaptchaImage(context.Context) (res *GetCaptchaImageResult, err error)
	// 发送短信验证码
	SendSmsCode(context.Context, *SendSmsCodePayload) (res *SendSmsCodeResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "User"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"LoginByUsername", "LoginBySmsCode", "UpdatePassword", "GetCaptchaImage", "SendSmsCode"}

// LoginByUsernamePayload is the payload type of the User service
// LoginByUsername method.
type LoginByUsernamePayload struct {
	// 用户名
	Username string `json:"username"`
	// 密码
	Password string `json:"password"`
	// 图形验证码
	HumanCode string `json:"humanCode"`
	// 图形验证码ID
	CaptchaID string `json:"captchaID"`
}

// LoginByUsernameResult is the result type of the User service LoginByUsername
// method.
type LoginByUsernameResult struct {
	// 错误码
	Errcode int `json:"errcode"`
	// 错误消息
	Errmsg string   `json:"errmsg"`
	Data   *Session `json:"data"`
}

// LoginBySmsCodePayload is the payload type of the User service LoginBySmsCode
// method.
type LoginBySmsCodePayload struct {
	// 手机号
	Mobile string `json:"mobile"`
	// 短信验证码
	VerifyCode string `json:"verifyCode"`
}

// LoginBySmsCodeResult is the result type of the User service LoginBySmsCode
// method.
type LoginBySmsCodeResult struct {
	// 错误码
	Errcode int `json:"errcode"`
	// 错误消息
	Errmsg string   `json:"errmsg"`
	Data   *Session `json:"data"`
}

// UpdatePasswordPayload is the payload type of the User service UpdatePassword
// method.
type UpdatePasswordPayload struct {
	// JWT used for authentication
	Token       string `json:"token"`
	OldPassword string `json:"oldPassword"`
	NewPassword string `json:"newPassword"`
}

// UpdatePasswordResult is the result type of the User service UpdatePassword
// method.
type UpdatePasswordResult struct {
	// 错误码
	Errcode int `json:"errcode"`
	// 错误消息
	Errmsg string         `json:"errmsg"`
	Data   *SuccessResult `json:"data"`
}

// GetCaptchaImageResult is the result type of the User service GetCaptchaImage
// method.
type GetCaptchaImageResult struct {
	// 错误码
	Errcode int `json:"errcode"`
	// 错误消息
	Errmsg string   `json:"errmsg"`
	Data   *Captcha `json:"data"`
}

// SendSmsCodePayload is the payload type of the User service SendSmsCode
// method.
type SendSmsCodePayload struct {
	// 手机号
	Mobile string `json:"mobile"`
	// 图形验证码
	HumanCode string `json:"humanCode"`
	// 图形验证码ID
	CaptchaID string `json:"captchaID"`
}

// SendSmsCodeResult is the result type of the User service SendSmsCode method.
type SendSmsCodeResult struct {
	// 错误码
	Errcode int `json:"errcode"`
	// 错误消息
	Errmsg string         `json:"errmsg"`
	Data   *SuccessResult `json:"data"`
}

// 会话
type Session struct {
	User        *User        `json:"user"`
	Credentials *Credentials `json:"credentials"`
}

// 用户
type User struct {
	// ID
	ID string `json:"id"`
	// 用户名
	Username string `json:"username"`
	// 昵称
	Nickname string `json:"nickname"`
	// 手机号
	Mobile string `json:"mobile"`
	// 是否可用
	IsActive bool `json:"isActive"`
}

type Credentials struct {
	// JWT token
	Token string `json:"token"`
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn int `json:"expiresIn"`
}

// 成功信息
type SuccessResult struct {
	// success
	OK bool `json:"ok"`
}

type Captcha struct {
	// 图片base64
	Image string `json:"image"`
	// 验证码ID
	CaptchaID string `json:"captchaID"`
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_server_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
