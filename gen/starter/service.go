// Code generated by goa v3.0.9, DO NOT EDIT.
//
// starter service
//
// Command:
// $ goa gen starter/design

package starter

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// 微服务
type Service interface {
	// 使用账号密码登录
	LoginByUsername(context.Context, *LoginByUsernamePayload) (res *LoginByUsernameResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "starter"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"LoginByUsername"}

// LoginByUsernamePayload is the payload type of the starter service
// LoginByUsername method.
type LoginByUsernamePayload struct {
	// 用户名
	Username string `json:"username"`
	// 密码
	Password string `json:"password"`
}

// LoginByUsernameResult is the result type of the starter service
// LoginByUsername method.
type LoginByUsernameResult struct {
	// 错误码
	Errcode int `json:"errcode"`
	// 错误消息
	Errmsg string   `json:"errmsg"`
	Data   *Session `json:"data"`
}

// 会话
type Session struct {
	User        *User        `json:"user"`
	Credentials *Credentials `json:"credentials"`
}

// 用户
type User struct {
	// ID
	ID string `json:"id"`
	// 用户名
	Username string `json:"username"`
	// 昵称
	Nickname string `json:"nickname"`
	// 手机号
	Mobile string `json:"mobile"`
	// 是否可用
	IsActive bool `json:"isActive"`
}

type Credentials struct {
	// JWT token
	Token string `json:"token"`
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn int `json:"expiresIn"`
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_server_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
