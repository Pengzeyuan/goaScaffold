package protoMine

//(a)占用空间小
//一条消息数据，用protobuf序列化后的大小是json的10分之一，xml格式的20分之一，是二进制序列化的10分之一（极端情况下，会大于等于直接序列化），
//总体看来ProtoBuf的优势还是很明显的。
//(b)解析速度快
//解析速度快，主要归功于protobuf对message 没有动态解析，没有了动态解析的处理序列化速度自然快了。就比如xml ，
//获取文件之后，还需要解析标签、节点、字段，每一个都需要遍历，而protobuf不需要，直接将field装入流。
//(c)兼容性好
//fieldNumber 为每个field定义一个编号，其一保证不重复，其二保证其在流中的位置。如若当前数据流中有某个字段，
//而解析方没有相关的解析代码，解析放会直接skip 吊这个field，而且读数据的position也会后移，保证后续读取不出问题。
//参考来源：https://blog.csdn.net/ljun_1129/article/details/77370659

//应用场景
//传输数据量大 & 网络环境不稳定 的数据存储、RPC 数据交换 的需求场景，在 传输数据量较大的需求场景下，Protocol Buffer比XML、Json 更小、更快、使用 & 维护更简单！
//
//如 即时IM （QQ、微信）的需求场景
//1、json: 一般的web项目中，最流行的主要还是json。因为浏览器对于json数据支持非常好，有很多内建的函数支持。
//2、xml: 在webservice中应用最为广泛，但是相比于json，它的数据更加冗余，因为需要成对的闭合标签。json使用了键值对的方式，不仅压缩了一定的数据空间，同时也具有可读性。
//3、protobuf:是后起之秀，是谷歌开源的一种数据格式，适合高性能，对响应速度有要求的数据传输场景。因为profobuf是二进制数据格式，需要编码和解码。数据本身不具有可读性。
//因此只能反序列化之后得到真正可读的数据。
//
//1：序列化后体积相比Json和XML很小，适合网络传输
//2：支持跨平台多语言
//3：消息格式升级和兼容性还不错
//4：序列化反序列化速度很快，快于Json的处理速速
//PS:在一个需要大量的数据传输的场景中，如果数据量很大，那么选择protobuf可以明显的减少数据量，减少网络IO，从而减少网络传输所消耗的时间。
