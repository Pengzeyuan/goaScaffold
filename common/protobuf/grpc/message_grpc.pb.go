// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ManageClient is the client API for Manage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageClient interface {
	// 添加一个人
	AddPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Result, error)
	// 添加很多人
	AddPersons(ctx context.Context, opts ...grpc.CallOption) (Manage_AddPersonsClient, error)
	// 获取指定数目的个人列表
	GetPersonsLimit(ctx context.Context, in *ReqNum, opts ...grpc.CallOption) (Manage_GetPersonsLimitClient, error)
	// 获取名字为输入的个人列表
	GetPersons(ctx context.Context, opts ...grpc.CallOption) (Manage_GetPersonsClient, error)
}

type manageClient struct {
	cc grpc.ClientConnInterface
}

func NewManageClient(cc grpc.ClientConnInterface) ManageClient {
	return &manageClient{cc}
}

func (c *manageClient) AddPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc.Manage/AddPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddPersons(ctx context.Context, opts ...grpc.CallOption) (Manage_AddPersonsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Manage_serviceDesc.Streams[0], "/grpc.Manage/AddPersons", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageAddPersonsClient{stream}
	return x, nil
}

type Manage_AddPersonsClient interface {
	Send(*Person) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type manageAddPersonsClient struct {
	grpc.ClientStream
}

func (x *manageAddPersonsClient) Send(m *Person) error {
	return x.ClientStream.SendMsg(m)
}

func (x *manageAddPersonsClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageClient) GetPersonsLimit(ctx context.Context, in *ReqNum, opts ...grpc.CallOption) (Manage_GetPersonsLimitClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Manage_serviceDesc.Streams[1], "/grpc.Manage/GetPersonsLimit", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageGetPersonsLimitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manage_GetPersonsLimitClient interface {
	Recv() (*Person, error)
	grpc.ClientStream
}

type manageGetPersonsLimitClient struct {
	grpc.ClientStream
}

func (x *manageGetPersonsLimitClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageClient) GetPersons(ctx context.Context, opts ...grpc.CallOption) (Manage_GetPersonsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Manage_serviceDesc.Streams[2], "/grpc.Manage/GetPersons", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageGetPersonsClient{stream}
	return x, nil
}

type Manage_GetPersonsClient interface {
	Send(*ReqName) error
	Recv() (*Person, error)
	grpc.ClientStream
}

type manageGetPersonsClient struct {
	grpc.ClientStream
}

func (x *manageGetPersonsClient) Send(m *ReqName) error {
	return x.ClientStream.SendMsg(m)
}

func (x *manageGetPersonsClient) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManageServer is the server API for Manage service.
// All implementations must embed UnimplementedManageServer
// for forward compatibility
type ManageServer interface {
	// 添加一个人
	AddPerson(context.Context, *Person) (*Result, error)
	// 添加很多人
	AddPersons(Manage_AddPersonsServer) error
	// 获取指定数目的个人列表
	GetPersonsLimit(*ReqNum, Manage_GetPersonsLimitServer) error
	// 获取名字为输入的个人列表
	GetPersons(Manage_GetPersonsServer) error
	MustEmbedUnimplementedManageServer()
}

// UnimplementedManageServer must be embedded to have forward compatible implementations.
type UnimplementedManageServer struct {
}

func (UnimplementedManageServer) AddPerson(context.Context, *Person) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerson not implemented")
}
func (UnimplementedManageServer) AddPersons(Manage_AddPersonsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddPersons not implemented")
}
func (UnimplementedManageServer) GetPersonsLimit(*ReqNum, Manage_GetPersonsLimitServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPersonsLimit not implemented")
}
func (UnimplementedManageServer) GetPersons(Manage_GetPersonsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPersons not implemented")
}
func (UnimplementedManageServer) mustEmbedUnimplementedManageServer() {}

// UnsafeManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageServer will
// result in compilation errors.
type UnsafeManageServer interface {
	mustEmbedUnimplementedManageServer()
}

func RegisterManageServer(s grpc.ServiceRegistrar, srv ManageServer) {
	s.RegisterService(&_Manage_serviceDesc, srv)
}

func _Manage_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Manage/AddPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddPersons_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManageServer).AddPersons(&manageAddPersonsServer{stream})
}

type Manage_AddPersonsServer interface {
	SendAndClose(*Result) error
	Recv() (*Person, error)
	grpc.ServerStream
}

type manageAddPersonsServer struct {
	grpc.ServerStream
}

func (x *manageAddPersonsServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *manageAddPersonsServer) Recv() (*Person, error) {
	m := new(Person)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Manage_GetPersonsLimit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqNum)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManageServer).GetPersonsLimit(m, &manageGetPersonsLimitServer{stream})
}

type Manage_GetPersonsLimitServer interface {
	Send(*Person) error
	grpc.ServerStream
}

type manageGetPersonsLimitServer struct {
	grpc.ServerStream
}

func (x *manageGetPersonsLimitServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func _Manage_GetPersons_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManageServer).GetPersons(&manageGetPersonsServer{stream})
}

type Manage_GetPersonsServer interface {
	Send(*Person) error
	Recv() (*ReqName, error)
	grpc.ServerStream
}

type manageGetPersonsServer struct {
	grpc.ServerStream
}

func (x *manageGetPersonsServer) Send(m *Person) error {
	return x.ServerStream.SendMsg(m)
}

func (x *manageGetPersonsServer) Recv() (*ReqName, error) {
	m := new(ReqName)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Manage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Manage",
	HandlerType: (*ManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPerson",
			Handler:    _Manage_AddPerson_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddPersons",
			Handler:       _Manage_AddPersons_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPersonsLimit",
			Handler:       _Manage_GetPersonsLimit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPersons",
			Handler:       _Manage_GetPersons_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
